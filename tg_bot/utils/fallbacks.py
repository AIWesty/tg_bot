from typing import Optional
import json
from pathlib import Path
from typing import Optional, Dict
from datetime import datetime, timedelta

class FallbackManager:
    def __init__(self):
        self.cache_dir = Path("data/cache")
        self.cache_dir.mkdir(exist_ok=True)
        
        # –∫–µ—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.weather_cache = self._load_cache("weather")
        self.cat_cache = self._load_cache("cats")

    def _load_cache(self, cache_type: str) -> Dict:
        cache_file = self.cache_dir / f"{cache_type}_cache.json"
        if cache_file.exists():
            with open(cache_file, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}

    def _save_cache(self, cache_type: str, data: Dict):
        cache_file = self.cache_dir / f"{cache_type}_cache.json"
        with open(cache_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False)

    def get_weather_fallback(self, city: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None"""
        cached = self.weather_cache.get(city)
        if cached and datetime.now() - datetime.fromisoformat(cached["time"]) < timedelta(hours=1):
            return cached["text"]
        return None
    
    def update_weather_cache(self, city: str, temperature: str, wind: str, clouds: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ–≥–æ–¥—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        self.weather_cache[city] = {
            "text": (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind}\n"
                f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}"
            ),
            "time": datetime.now().isoformat()
        }
        self._save_cache("weather", self.weather_cache)

    def get_cat_fallback(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é"""
        return self.cat_cache.get("last_url", "https://cdn.pixabay.com/photo/2017/02/20/18/03/cat-2083492_640.jpg")

    def update_cat_cache(self, image_url: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –∫–æ—Ç–∏–∫–æ–≤"""
        self.cat_cache["last_url"] = image_url
        self._save_cache("cats", self.cat_cache)

    def get_voice_fallback(self) -> str:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
fallback = FallbackManager()