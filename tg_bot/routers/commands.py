from aiogram import F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from keyboards.reply import get_action_keyboard, get_main_keyboard
from keyboards.inline import language_keyboard
from utils.user_stats import format_stats_message, get_user_stats
from utils.logger import logger, user_stats_logger
from utils.i18n import translator
from database.crud import get_user_language, save_user
import random
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from database.crud import set_user_language
from aiogram.types import CallbackQuery

router = Router() # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä(–æ–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —Ä–æ—É—Ç–µ—Ä)

@router.message(Command('start'))  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç, –ø–æ —Å—É—Ç–∏ "–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç" –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    
    if message.from_user is None:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        await message.answer(translator.get('unknown_user_error', default='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        return
    
    user = message.from_user  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    lang = get_user_language(user.id)  # –ø–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–±–∞–∑—É" (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
    save_user(
        user_id=user.id,
        username=user.username or "",
        first_name=user.first_name or translator.get('unknown_user', lang=lang),
        language=lang  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    )
    
    logger.log_message(user.id, translator.get('start_command_log', lang=lang))  # –ª–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats_logger.log_command(user.id, '/start')
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    welcome_text = translator.get(
        'start_message',
        lang=lang,
        name=user.first_name or translator.get('unknown_user', lang=lang)
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(lang)  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∏)
    )
    

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.from_user is None:
            logger.log_error("Empty from_user in help command")
            return

        user_id = message.from_user.id
        lang = get_user_language(user_id) or 'en'
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.log_message(user_id, f"Called /help command (lang: {lang})")
        user_stats_logger.log_command(user_id, '/help')

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        def get_translation(key: str) -> str:
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å fallback'–∞–º–∏"""
            result = translator.get(key, lang=lang)
            return str(result) if result is not None else f"[{key}]"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        header = get_translation("help_header")
        commands_title = get_translation("help_commands_title")
        examples_title = get_translation("help_examples_title")
        footer = get_translation("help_footer")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        raw_commands = translator.get("help_commands", lang=lang)
        if isinstance(raw_commands, dict):
            commands = "\n".join(
                f"‚Ä¢ /{cmd} - {desc}"
                for cmd, desc in sorted(raw_commands.items())
            )
        else:
            commands = str(raw_commands) if raw_commands is not None else ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        raw_examples = translator.get("help_examples", lang=lang)
        if isinstance(raw_examples, dict):
            examples = "\n".join(
                f"üîπ {example}"
                for example in raw_examples.values()
            )
        elif isinstance(raw_examples, list):
            examples = "\n".join(f"üîπ {ex}" for ex in raw_examples)
        else:
            examples = str(raw_examples) if raw_examples is not None else ""

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = [
            f"üìù {header}",
            "",
            f"<b>{commands_title}</b>",
            commands,
            "",
            f"<b>{examples_title}</b>",
            examples,
            "",
            footer
        ]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            "\n".join(message_parts),
            parse_mode="HTML",
            reply_markup=get_action_keyboard(lang)
        )

    except Exception as e:
        logger.log_error(f"Help command error: {str(e)}")
        error_msg = translator.get(
            "error_help",
            lang=get_user_language(message.from_user.id) if message.from_user else 'en',
            default="‚ö†Ô∏è Help unavailable now"
        )
        await message.answer(str(error_msg), parse_mode="HTML")

@router.message(F.text == '/')
async def show_commands_hint(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–∏ –≤–≤–æ–¥–µ /"""
    if message.from_user is None:
        return
    lang = get_user_language(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π 
    commands_dict = translator.get("help_commands", lang=lang)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏
    if isinstance(commands_dict, dict):
        commands = list(commands_dict.keys())
    else:
        commands = ["start", "help"]  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    builder = ReplyKeyboardBuilder()
    for cmd in commands:
        builder.button(text=f"/{cmd}")
    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    
    await message.answer(
        translator.get("type_slash", lang=lang),
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=translator.get(
                "choose_command_placeholder", 
                lang=lang,
                default="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
            )
        )
    )
    

@router.message(Command('about'))
async def cmd_about(message: Message) -> None:  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã about
    import json
    from pathlib import Path
    
    try:
        with open('config/about.json', 'r', encoding='utf-8') as f: #–¥–∞–Ω–Ω—ã–µ –±–µ—Ä–µ–º –∏–∑ config/about
            about_data = json.load(f) #–ø–æ–¥—Ä–≥—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ 
            
            lang = get_user_language(message.from_user.id) if message.from_user else 'en'
            
            about_txt = (
                f"ü§ñ {about_data['name']}\n"
                f"üìù {translator.get('about_description', lang=lang, default=about_data.get('description', ''))}\n"
                f"üõ†Ô∏è {translator.get('version', lang=lang)}: {about_data['version']}\n"
                f"üë®‚Äçüíª {translator.get('author', lang=lang)}: {about_data['author']}"
            )
            
            if message.from_user is None: # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ from_user
                await message.answer(about_txt)
                return
            
            user = message.from_user
            
            logger.log_message(user.id, f'–í—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É (/about)')  
            user_stats_logger.log_command(user.id, '/about')
            
            await message.answer(about_txt)
            
    except FileNotFoundError:
        await message.answer(translator.get(
            'about_file_not_found', 
            lang=get_user_language(message.from_user.id) if message.from_user else 'en',
            default="–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ))
    except json.JSONDecodeError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ about.json: {str(e)}" 
        logger.log_error(error_msg)
        await message.answer(translator.get(
            'about_load_error',
            lang=get_user_language(message.from_user.id) if message.from_user else 'en',
            default="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"
        ))
    except KeyError as e:
        error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ about.json: {str(e)}"  
        logger.log_error(error_msg)
        await message.answer(translator.get(
            'about_incomplete_info',
            lang=get_user_language(message.from_user.id) if message.from_user else 'en',
            default="–ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
        ))
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"  
        logger.log_error(error_msg)
        await message.answer(translator.get(
            'about_unknown_error',
            lang=get_user_language(message.from_user.id) if message.from_user else 'en',
            default="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        ))
    
    
@router.message(Command("roll"))
async def cmd_roll(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞
    if message.text is None:
        error_msg = translator.get(
            'roll_processing_error',
            lang=get_user_language(message.from_user.id) if message.from_user else 'en'
        ) or "‚ùå Failed to process command."
        await message.answer(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user is None:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 'en'
    user = message.from_user
    lang = get_user_language(user.id) or 'en'  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
    
    # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è

    args = message.text.split()

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if len(args) > 1:
            start, end = map(int, args[1].split("-"))
            num = random.randint(start, end)
            response = translator.get('roll_result_with_args', lang=lang) or f"üé≤ Rolled: {num}"
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π
        else:
            num = random.randint(1, 6)
            response = translator.get('roll_default', lang=lang) or f"üé≤ Rolled: {num}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç {num})
        if '{num}' in response:
            response = response.format(num=num)
            
        await message.answer(response)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.log_message(user.id, f'Used /roll command')
        user_stats_logger.log_command(user.id, '/roll')

    except (ValueError, IndexError):
        error_msg = translator.get('roll_usage_error', lang=lang) or "‚ùå Usage: /roll start-end (e.g. /roll 1-100)"
        await message.answer(error_msg)
    
@router.message(Command("language"))
async def cmd_language(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    if message.from_user is None: 
        return
    user = message.from_user
    lang = get_user_language(message.from_user.id)
    await message.answer(
        translator.get("choose_language", lang=lang),
        reply_markup=language_keyboard()
    )
    logger.log_message(user.id, '–í—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /language')  

@router.callback_query(F.data.startswith("set_lang_"))
async def set_language_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not callback.data or not callback.message or not callback.bot:
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ callback (—Ñ–æ—Ä–º–∞—Ç: set_lang_ru)
        lang = callback.data.split('_')[2]
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
        if lang not in translator.locales:
            raise ValueError("Unsupported language")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        set_user_language(user_id, lang)
        confirmation = translator.get(
            "language_changed", 
            lang=lang, 
            language=translator.locales[lang].get("language_name", lang)
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer(confirmation)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            if isinstance(callback.message, Message):
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    translator.get("choose_language", lang=lang),
                    reply_markup=language_keyboard()
                )
            else:
                # –î–ª—è –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                logger.log_message(user_id, '–í—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /set_language_callback')  
                await callback.bot.edit_message_text(
                    chat_id=callback.from_user.id,
                    message_id=callback.message.message_id if callback.message else None,
                    inline_message_id=callback.inline_message_id,
                    text=translator.get("choose_language", lang=lang),
                    reply_markup=language_keyboard()
                )
        except TelegramAPIError as e:
            await callback.answer(translator.get(
                "message_update_error",
                lang=lang,
                default="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            ))
            
    except IndexError:
        await callback.answer(translator.get(
            "request_format_error",
            lang=get_user_language(callback.from_user.id) if callback.from_user else 'en',
            default="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"
        ))
    except ValueError:
        supported_langs = ", ".join(translator.locales.keys())
        await callback.answer(translator.get(
            "unsupported_language_error",
            lang=get_user_language(callback.from_user.id) if callback.from_user else 'en',
            supported_langs=supported_langs,
            default=f"‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {supported_langs}"
        ))
    except Exception as e:
        await callback.answer(translator.get(
            "language_change_error",
            lang=get_user_language(callback.from_user.id) if callback.from_user else 'en',
            default="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"
        ))
        logger.log_error(f"Language change error: {str(e)}", user_id=callback.from_user.id)
        

@router.message(Command("me"))
async def cmd_me(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /me - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not message.from_user:
            logger.log_error("message.from_user –ø—É—Å—Ç–æ–π")  
            return

        user = message.from_user
        lang = get_user_language(user.id)
        logger.log_message(user.id, "–≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /me")  
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_data = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        user_stats_logger.log_command(user.id, "/me", user_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = user_stats_logger.get_user_stats(user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = format_stats_message(stats, lang)
        
        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.log_error(f"/me error: {e}", user.id)  # –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        error_msg = translator.get(
            "error_stats", 
            lang=lang, 
            default="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        )
        await message.answer(error_msg)